在自动驾驶中，轨迹规划的输出既可以是离散的轨迹点集合，也可以是参数化的多项式形式。两者各有优劣，选择哪一种更适合通常取决于特定的应用场景、系统架构以及控制算法。

### 离散轨迹点（Waypoints）

**优点：**
- **直观且简单**：轨迹由一系列的散点表示，容易理解，可以直接通过插值得到连续路径。
- **灵活性**：能够适应复杂的轨迹形状，不受多项式阶数的限制。
- **局部修改容易**：可以单独调整每一个轨迹点，而不影响其他部分的路径。

**缺点：**
- **轨迹平滑性**：可能需要额外的插值和平滑处理以确保轨迹的连续性和平滑性。
- **导数不连续**：如果不进行适当的平滑处理，速度和加速度（导数信息）可能会出现突变。

### 多项式轨迹

**优点：**
- **平滑性**：多项式可提供平滑连续的曲线和其导数，有助于保证车辆行驶的舒适性。
- **描述能力**：高阶多项式能够描述复杂的曲线形状。
- **易于求导**：求导运算简单，方便计算轨迹上的速度和加速度。

**缺点：**
- **过拟合风险**：高阶多项式可能导致过拟合，尤其是在数据点稀疏的情况下。
- **全局性质**：改变某个系数会影响整个曲线，无法只对局部区域进行调整。
- **数值稳定性问题**：在计算高阶多项式时可能会遇到数值稳定性问题。

### 控制方面的考虑

从控制的角度来看，理想的轨迹应该能够方便地被跟踪，并且能够生成连续且可实现的速度和加速度指令。通常，多项式轨迹由于其平滑性和连续性更容易被精确控制，特别是在无需频繁调整轨迹或轨迹变化相对平缓的情况下。离散的轨迹点可能需要更复杂的控制逻辑来保证车辆平顺地通过每个点，但它们在需要频繁调整或响应突发事件时可能更为灵活。

在实际的自动驾驶系统中，经常会结合使用这两种方法：首先使用多项式（或其他平滑的函数形式，如样条曲线）生成一条基本轨迹，然后在此基础上生成一系列离散的轨迹点供控制系统使用。这样做结合了多项式轨迹的平滑性和离散轨迹点的灵活性。最终，无论使用哪种形式的轨迹，关键在于确保轨迹的质量并与控制系统良好集成，以实现安全和高效的自动驾驶。